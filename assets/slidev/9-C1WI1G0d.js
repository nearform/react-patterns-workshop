import{I as f}from"./default-D5FNdOQF.js";import{_,ag as i}from"../index-Dxtvmalw.js";import{p as l,u as p,f as h}from"./context-CFyRt0vm.js";import{o as g,c as v,k as x,q as k,s as b,e}from"../modules/vue-Cx0_jHut.js";import"../modules/shiki-BjPRmREE.js";const y={__name:"9",setup(c,{expose:r}){r(),l(i);const{$slidev:o,$nav:t,$clicksContext:s,$clicks:a,$page:d,$renderContext:u,$frontmatter:m}=p(),n={$slidev:o,$nav:t,$clicksContext:s,$clicks:a,$page:d,$renderContext:u,$frontmatter:m,InjectedLayout:f,get frontmatter(){return i},get useSlideContext(){return p},get _provideFrontmatter(){return l},get _frontmatterToProps(){return h}};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}},$=e("h1",null,"Step 2: Fixing prop drilling with Context",-1),w=e("div",{class:"dense"},[e("ul",null,[e("li",null,"Hooks are a great way to share logic, but the data stored inside a Hook is isolated"),e("li",null,"This means that two components using the same Hook are not necessarily accessing the same data"),e("li",null,"To give multiple components access to the same data, we could pass the data as props from a shared parent"),e("li",null,'This works fine for simple components tree, but deeper the tree then more youâ€™ll be repeating yourself, passing data through several nested children components, we call it "prop drilling" issue'),e("li",null,"Abusing of prop drilling decreases performance, because all components touched by the prop drilling might re-render even if not using that variable for nothing else"),e("li",null,"And, of course, repeating yourself so much makes it harder to maintain the code")])],-1);function C(c,r,o,t,s,a){return g(),v(t.InjectedLayout,k(b(t._frontmatterToProps(t.frontmatter,8))),{default:x(()=>[$,w]),_:1},16)}const F=_(y,[["render",C],["__file","/@slidev/slides/9.md"]]);export{F as default};
